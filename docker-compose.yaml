version: "3"
services:

  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    environment:
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - rabbitmq_nodejs
  rabbitmq:
    image: rabbitmq:latest
    ports:
      - 5673:5672
      - 15673:15672

    networks:
      - rabbitmq_nodejs

  api:
    restart: always
    depends_on:
      - "rabbitmq"
      - mongodb
    build:
      dockerfile: Dockerfile
      context: ./
    volumes:
      - /app/node_modules
      - ./:/app
    ports:
      - "8080:8080"
    networks:
      - rabbitmq_nodejs
    # wait for the RabbitMQ server to be running before the consumer tries to connect to it
    command: sh -c '/bin/wait-for-it.sh mongodb:27017 rabbitmq:5672 --timeout=30 -- npm run start'
    environment:
      - SECRET_TOKEN=bosta
      - EMAIL_USERNAME=############
      - EMAIL_PASSWORD=############
      - PORT=8080
      - CLIENT_ID=################################.apps.googleusercontent.com
      - CLIENT_SECRET==################################.-=################################.
      - REFRESH_TOKEN==################################.
      - ACCESS_TOKEN = =################################.
      - DB_HOST=localhost
      - DB_USER=root
      - DB_PASSWORD=123456
      - DB_NAME=bostaDB
      - DB_PORT=27017

networks:
  rabbitmq_nodejs:
    driver: bridge

volumes:
  mongo-data: